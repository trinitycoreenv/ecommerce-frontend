name: Render Schema and Data Import

on:
  workflow_dispatch:
    inputs:
      run_import:
        description: "Run data import (requires data/export.json committed)"
        required: false
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  apply-schema:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Prepare Render URLs with sslmode=require
        shell: bash
        run: |
          URL="${{ secrets.DATABASE_URL_RENDER }}"
          if [[ "$URL" != *"sslmode="* ]]; then
            if [[ "$URL" == *"?"* ]]; then
              URL="$URL&sslmode=require"
            else
              URL="$URL?sslmode=require"
            fi
          fi
          # Ensure compatibility with node-postgres by also setting ssl=true
          if [[ "$URL" != *"ssl="* ]]; then
            if [[ "$URL" == *"?"* ]]; then
              URL="$URL&ssl=true"
            else
              URL="$URL?ssl=true"
            fi
          fi
          echo "DATABASE_URL=$URL" >> $GITHUB_ENV
          echo "DIRECT_DATABASE_URL=$URL" >> $GITHUB_ENV
          echo "PGSSLMODE=require" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Test DB connectivity (pg SELECT 1)
        id: pg_check
        continue-on-error: true
        shell: bash
        env:
          DATABASE_URL: ${{ env.DIRECT_DATABASE_URL }}
          PGSSLMODE: ${{ env.PGSSLMODE }}
          PGCONNECT_TIMEOUT: 15
          NODE_OPTIONS: --dns-result-order=ipv4first
        run: |
          node -e "(async()=>{const {Client}=require('pg');const url=process.env.DATABASE_URL;console.log('Connecting to Render Postgres...');const cfg={connectionString:url,keepAlive:true,connectionTimeoutMillis:15000,ssl:{rejectUnauthorized:false}};const c=new Client(cfg);try{await c.connect();const r=await c.query('SELECT 1');console.log('DB OK:',r.rows[0]);}catch(e){console.error('DB connectivity failed (pg):',e);process.exit(1);}finally{try{await c.end();}catch{}}})()"

      - name: Install PostgreSQL client (fallback)
        if: steps.pg_check.outcome == 'failure'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Fallback DB connectivity via psql (SELECT 1)
        if: steps.pg_check.outcome == 'failure'
        env:
          DATABASE_URL: ${{ env.DIRECT_DATABASE_URL }}
          PGSSLMODE: ${{ env.PGSSLMODE }}
          PGCONNECT_TIMEOUT: 15
        run: |
          echo "Testing connectivity with psql..."
          psql "$DATABASE_URL" -v ON_ERROR_STOP=1 -At -c "SELECT 1"

      - name: Apply schema with Prisma (migrate deploy)
        env:
          DATABASE_URL: ${{ env.DIRECT_DATABASE_URL }}
        run: pnpm exec prisma migrate deploy

  import-data:
    runs-on: ubuntu-latest
    needs: apply-schema
    if: ${{ github.event.inputs.run_import == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Prepare DATABASE_URL_RENDER with sslmode=require
        shell: bash
        run: |
          URL="${{ secrets.DATABASE_URL_RENDER }}"
          if [[ "$URL" != *"sslmode="* ]]; then
            if [[ "$URL" == *"?"* ]]; then
              URL="$URL&sslmode=require"
            else
              URL="$URL?sslmode=require"
            fi
          fi
          echo "DATABASE_URL_RENDER=$URL" >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Import data to Render
        run: node scripts/import-render-data.js